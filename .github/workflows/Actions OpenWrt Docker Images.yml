name: Actions OpenWrt Docker Images (Local Only)

env:
  PREFIX_URL: https://downloads.immortalwrt.org/releases/24.10-SNAPSHOT/targets/
  DEVICE_VERSION: 24.10-SNAPSHOT

on:
  workflow_dispatch:
    inputs:
      INPUT_TARGET:
        description: "Target to build (platform/target/subtarget)"
        required: false
        default: "all"
  schedule:
    - cron: 0 0 * * *

jobs:
  Config:
    name: Generate Config
    runs-on: ubuntu-latest
    outputs:
      TARGETS: ${{ steps.find-targets.outputs.TARGETS }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Find Targets
        id: find-targets
        env:
          INPUT_TARGET: ${{ github.event.inputs.INPUT_TARGET }}
        run: |
          if [ "$INPUT_TARGET" = "all" ] || [ "$INPUT_TARGET" = "" ]; then
            export TARGETS="$(cat config/platform.config)"
          else
            export TARGETS="$INPUT_TARGET"
          fi
          JSON='{"config": ["default"], "targets":['
          FIRST=1
          for TARGET in $TARGETS; do
          [[ $FIRST -ne 1 ]] && JSON="$JSON"','
          JSON="$JSON"'"'"${TARGET}"'"'
          FIRST=0
          done
          JSON="$JSON"']}'
          echo "TARGETS=$JSON" >> $GITHUB_OUTPUT

  Docker-Images:
    name: ${{ matrix.TARGETS }}
    needs: [Config]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix: ${{fromJson(needs.Config.outputs.TARGETS)}}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Build Environment
        run: |
          sudo apt-get update -qq
          sudo apt-get install -qq build-essential libncurses5-dev zlib1g-dev \
            gawk git gettext libssl-dev xsltproc rsync wget unzip python3 \
            zstd qemu-user-static binfmt-support

      - name: Configure QEMU for ARM64
        run: |
          docker run --rm --privileged multiarch/qemu-user-static --reset -p yes

      - name: Extract Build Parameters
        id: build-params
        run: |
          DEVICE_PLATFORM=$(echo ${{ matrix.TARGETS }} | cut -d'/' -f1)
          DEVICE_TARGET=$(echo ${{ matrix.TARGETS }} | cut -d'/' -f2)
          DEVICE_SUBTARGET=$(echo ${{ matrix.TARGETS }} | cut -d'/' -f3)
          ARCH_SUFFIX=$(echo ${{ matrix.TARGETS }} | cut -d'/' -f5)
          
          echo "DEVICE_PLATFORM=$DEVICE_PLATFORM" >> $GITHUB_ENV
          echo "DEVICE_TARGET=$DEVICE_TARGET" >> $GITHUB_ENV
          echo "DEVICE_SUBTARGET=$DEVICE_SUBTARGET" >> $GITHUB_ENV
          echo "ARCH_SUFFIX=$ARCH_SUFFIX" >> $GITHUB_ENV

      - name: Download Image Builder
        run: |
          wget -q $PREFIX_URL/${{ env.DEVICE_TARGET }}/${{ env.DEVICE_SUBTARGET }}/immortalwrt-imagebuilder-$DEVICE_VERSION-${{ env.DEVICE_TARGET }}-${{ env.DEVICE_SUBTARGET }}.Linux-x86_64.tar.zst

      - name: Setup Image Builder
        run: |
          tar -I zstd -xvf *.tar.zst
          cd immortalwrt-imagebuilder-*
          cp -rf $GITHUB_WORKSPACE/files .
          chmod +x files/etc/rc.local

      - name: Compile RootFS
        run: |
          cd immortalwrt-imagebuilder-*
          [ -x $GITHUB_WORKSPACE/scripts/preset-terminal-tools.sh ] && $GITHUB_WORKSPACE/scripts/preset-terminal-tools.sh
          
          PKG_LIST=$(tr -s '\n' ' ' < $GITHUB_WORKSPACE/config/packages.config)
          make image PACKAGES="$PKG_LIST" FILES="files"
          
          # Move output to workspace root
          mv bin/targets/${{ env.DEVICE_TARGET }}/${{ env.DEVICE_SUBTARGET }}/*rootfs.tar.gz $GITHUB_WORKSPACE/

      - name: Prepare Docker Build Context
        run: |
          mkdir -p docker-build
          mv *rootfs.tar.gz docker-build/rootfs.tar.gz
          cp Dockerfile docker-build/

      - name: Build Docker Image Locally
        run: |
          cd docker-build
          
          # Determine architecture tag (amd64/arm64)
          if [ "${{ env.ARCH_SUFFIX }}" = "amd64" ]; then
            ARCH_TAG="linux/amd64"
          elif [ "${{ env.ARCH_SUFFIX }}" = "arm64" ]; then
            ARCH_TAG="linux/arm64"
          else
            echo "Unsupported architecture"
            exit 1
          fi
          
          docker build \
            --platform $ARCH_TAG \
            -t local-openwrt:${{ env.ARCH_SUFFIX }} .
          
          # Save as compressed artifact
          docker save local-openwrt:${{ env.ARCH_SUFFIX }} | gzip > openwrt-${{ env.ARCH_SUFFIX }}.tar.gz

      - name: Save Artifact
        uses: actions/upload-artifact@v3
        with:
          name: openwrt-${{ env.ARCH_SUFFIX }}-image
          path: |
            docker-build/openwrt-${{ env.ARCH_SUFFIX }}.tar.gz
            docker-build/rootfs.tar.gz
